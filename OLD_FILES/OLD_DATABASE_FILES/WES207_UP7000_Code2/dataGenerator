#dataGenerator.py
#This will generate bogus data every second that we will need to send
import time
import datetime
import random
import threading
import numpy as np

import towerConfig
import database

#Constants for generating data
NUM_DEVICES             =   20          #Number of devices deployed
LAT                     =   32.8812     #latitude
LON                     =   117.2344    #longitude
ALT                     =   0           #altitude (assume sea level)
PROB_DEVICE_SEEN        =   .05         #probability a device transmits to a tower. Arbitrary
COLLECTION_INTERVAL     =   1           #[seconds] how often data is collected

#create data and store into database
class DataGenerator:
    def __init__(self):
        self.database = database.TowerDatabase() #call database class
        #Print db contents:
        self.database.print_database()
        self.sample_counter = self.database.get_last_sample_num() + 1 #entry number for this newly generated data
        self.running = False
        self.generator_thread = None

    #begin generating data
    def start(self):
        if self.running:
            print('Data generator already started')
            return
        
        self.running = True
        self.generator_thread = threading.Thread(target=self._data_generation_loop)
        self.generator_thread.daemon = True
        self.generator_thread.start()
        #print("Data will now generate")

    #stop generating data
    def stop(self):
        self.running = False
        if self.generator_thread == True:
            self.generator_thread.join(timeout=2) #Why is timeout=2?
        print("Data Generator terminated.")

    # Generate a single record
    def _generate_data(self,device_id):
        current_time = datetime.datetime.now().isoformat()
        #device_id = f"DEV{random.randint(1, NUM_DEVICES):03d}"  #pick random device id. eg "DEV002"
        #device_id = random.randint(1, NUM_DEVICES) # better to just have as an integer.

        latitude = LAT + random.uniform(-0.001, 0.001)
        longitude = LON + random.uniform(-0.001, 0.001)
        altitude = ALT + random.uniform(0, 100)
        ack = 0

        record = np.array([
            towerConfig.TOWER_ID,
            device_id,
            self.sample_counter,
            current_time,
            latitude,
            longitude,
            altitude,
            ack
        ])
        self.sample_counter += 1
        return record
    
    def _data_generation_loop(self):
        '''Loop through and generate data for all devices that are within range.'''
        # Print table header first
        print("\n" + towerConfig.TABLE_HEADER.format(*towerConfig.COLUMN_NAMES) + "\n" +(towerConfig.DIVIDER_LINE)) #print table header
        #print existing table


        while self.running:
            dev_active = np.random.binomial(n=1, p=PROB_DEVICE_SEEN, size=NUM_DEVICES)
            for i in range(NUM_DEVICES):
                if dev_active[i] == 1: #only send data if device was seen
                   record = self._generate_data(i)
                   self.database.add_record(record)

                   #format timestamp from YYYY-MM-DDTHH:MM:SS.ssssss to readable YYYY-MM-DD HH:MM:SS
                   timestamp_short = record[database.TIME_IDX].split("T")[0] + " " + record[database.TIME_IDX].split("T")[1][:8]
                   print(towerConfig.ROW_FORMAT.format(
                       int(record[database.SAMPLE_IDX]),
                       int(record[database.TOWER_IDX]),
                       int(record[database.SAMPLE_IDX]),
                       timestamp_short, 
                       float(record[database.LAT_IDX]),
                       float(record[database.LON_IDX]),
                       float(record[database.ALT_IDX]),
                       int(record[database.ACK_IDX])
                   ))
            time.sleep(COLLECTION_INTERVAL)



if __name__ == "__main__":
    #print("Data Generator running. Press Ctrl+C to stop.")
    generator = DataGenerator()
    print("\nAbout to start data Generator.\nPress Ctrl+C to stop.")
    generator.start()
    #print("Data Generator running. Press Ctrl+C to stop.")
    
    try:
        # Run for a minute to test
        #print("Data Generator running. Press Ctrl+C to stop.")
        time.sleep(60)  
    except KeyboardInterrupt:
        print("\nStopping data generator...")
    finally:
        generator.stop()